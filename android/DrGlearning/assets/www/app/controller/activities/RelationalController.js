Ext.define('DrGlearning.controller.activities.RelationalController', {
    extend: 'Ext.app.Controller',
    requires: ['DrGlearning.store.Careers','DrGlearning.store.Levels','DrGlearning.view.CareersFrame'],
    views: ['ActivityFrame', 'activities.Relational'],
	controllers: ['DrGlearning.controller.Careers'],
    stores: ['Careers','Levels','Activities'],
	refs: [{
        ref: 'activities.reospatial',
        selector: 'mainview',
        autoCreate: true,
        xtype: 'mainview'
    }],	
	updateActivity: function(view,newActivity) {
		activityView = Ext.create('DrGlearning.view.activities.Relational');
		var html='<script type="text/javascript" src="resources/js/processing-1.3.6.min.js"></script>'+'</br>';
		html=html+'    <script id="script1" type="text/javascript"> var graphNodes = {1: {"name": "val1"}, 2: {"name": "val2"}, 3: {"name": "val3"}, 4: {"name": "val4"}, 5: {"name": "val5"}, 6: {"name": "val6"}, 7: {"name": "val7"}, 8: {"name": "val8"}};var graphEdges = [{"source": 1, "target": 2, "properties": {"type": "t1"}},            {"source": 1, "target": 3, "properties": {"type": "t2"}},                {"source": 2, "target": 4, "properties": {"type": "t1"}},                {"source": 4, "target": 5, "properties": {"type": "t1"}},                {"source": 5, "target": 6, "properties": {"type": "t1"}},                {"source": 5, "target": 8, "properties": {"type": "t1"}},                {"source": 6, "target": 7, "properties": {"type": "t1"}},                {"source": 7, "target": 8, "properties": {"type": "t1"}}];var sourcePath = 1;var targetPath = 8;var scoredNodes = [];var query = [];var P;function graphSketch(P) {    // Init canvas    P.size(400,300);    P.background(169, 195, 231);    P.stroke(0);    for(var n in graphNodes){        graphNodes[n]["_visible"] = false;    }    addVisitedNode(sourcePath);    drawGraph(P);}function addVisitedNode(node){    graphNodes[node]["_visible"] = true;    selectObj = document.getElementById("next-to-expand");    newOpt = document.createElement("option");    newOpt.value = node;    newOpt.text = graphNodes[node]["name"];    selectObj.add(newOpt, null);    updateTypes();}function drawGraph(P){    for(var n in graphNodes){        var node = graphNodes[n];        if (!node.hasOwnProperty("_posx")) {            node["_posx"] = P.random(P.width);            node["_posy"] = P.random(P.height);        }        if (node["_visible"]){            P.fill(255);            P.ellipse(node["_posx"],node["_posy"],30,30);            P.fill(0);            P.text(node["name"], node["_posx"],node["_posy"]);        }    }    for(var i in graphEdges){        var edge = graphEdges[i];        var sourceNode = graphNodes[edge["source"]];        var targetNode = graphNodes[edge["target"]];        if (sourceNode["_visible"] && targetNode["_visible"]){            P.line(sourceNode["_posx"], sourceNode["_posy"],                    targetNode["_posx"], targetNode["_posy"])        }    }}function processAnswer(){    var nodeToExpand = document.getElementById("next-to-expand").value;    var typeToCheck = document.getElementById("next-type").value;    var answer = document.getElementById("answer").value;    for(var i in graphEdges){        var edge = graphEdges[i];        if (edge["source"]==nodeToExpand && edge["properties"]["type"] == typeToCheck && graphNodes[edge["target"]]["name"]==answer){            addVisitedNode(edge["target"]);            drawGraph(P);            if (edge["target"]==targetPath){                P.text(" YOU WIN!!!!", 20,20);            }            break;         }    }}function updateTypes() {    var nodeToExpand = document.getElementById("next-to-expand").value;    var selectObj = document.getElementById("next-type");    for(var i in graphEdges){        var edge = graphEdges[i];        if (edge["source"]==nodeToExpand) {            var newOpt = document.createElement("option");            newOpt.value = edge["properties"]["type"];            newOpt.text = edge["properties"]["type"];            selectObj.add(newOpt);        }    }}function init() {    var sketch = new Processing.Sketch();    sketch.attachFunction = graphSketch;    var canvas = document.getElementById("canvas1");    P = new Processing(canvas, sketch);}</script>';
		html=html+'<div id="header">Hello Relational Activity</div>	    <div id="content" onLoad="init()">	      <div id="control-bar">	        <select id="next-to-expand" onChange="updateTypes()">	        </select>	        <select id="next-type">	        </select>	        <input id="answer" type="text"/>	        <button onClick="processAnswer()">Try!</button>	      </div>	      <canvas id="canvas1" width="500" height="500"></canvas>';
		activityView.down('panel[id=contentSencha]').setHtml(html);
		activityView.down('title').setTitle(newActivity.data.query);
		view.add(activityView);
	},
});
